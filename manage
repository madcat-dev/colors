#!/usr/bin/env bash

# is using as library
[[ "${0}" != "${BASH_SOURCE}" ]] && \
    MANAGE_E8CBAA_LIB=true || MANAGE_E8CBAA_LIB=""

# Extended color names list 
COLOR_KEYS=(
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    foreground
    background
    selection_foreground
    selection_background
    cursor
    url_color
    highlight
)


USAGE=$(cat <<- ENDDATA
Usage: ${0} [theme] [install] [ARGS...]
  ARGS:
    --color|-c index #color 
                        - set custom theme color by index

    --saturation|-s value
                        - change all colors intensity by a given value

    --relative-saturation|-S
                        - change 8..15 colors intensity relatively base colors.
                          This function forcibly changes the color relative to 
                          the main one. The change value can be set in the 
                          BRIGHTNEST variable, default: 10.
                          Color '0' is excluded in modifier list

    --black|-b value    - сhanging color 0 (black) by increasing the percentage
                          of background intensity by a given value.
                          This function using original black color

    --font|-f "font"    - set base font, example "Noto Sans 11"
                          (replace GTK_FONT_NAME from config file)
                    
    --config|-C "path"  - use external config from path
                          default use config.GTK_THEME_NAME if exists  

    --image|-I "path"   - generate new color theme from image

    --set-bg [fade height (px)]
                        - set background wallpaper (feh use)
                          picture must be specified in the --image parameter

    --light             - gtk application prefer light theme
    --dark              - gtk application prefer dark theme
    
    --short             - short preview color scheme
    --purge             - clear cache

    --help|-h           - print this usage
    --list|-l           - show a list of available schemes 
    --cls|-             - theme preview without extended configs

Order of applying modifiers:
    - get theme from image (if given)
    - load color scheme (if given)
    - apply saturation
    - set special colors value
    - load preselected config or default
    - aplly dark/light theme mode
    - apply black-color modifier (if given)
    - apply custom colors values
    - apply brightnest of relative saturation (always)

Available schemes:
    \033[33m$(echo $(ls `dirname "$0"`/schemes))\033[0m
ENDDATA
)


function displaytime {
    local T=$1
    local W=$((T/60/60/24/7))
    local D=$((T/60/60/24%7))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))

    if [[ $W > 0 ]]; then
        printf '%d weeks ' $W
        printf '%d days ' $D
    else
        if [[ $D > 0 ]]; then
            printf '%d days ' $D
            printf '%d hours ' $H
        else
            [[ $H > 0 ]] && printf '%d hours ' $H
            [[ $M > 0 ]] && printf '%d minutes ' $M
            [[ $H = 0 ]] && printf '%d seconds ' $S
        fi
    fi

    printf 'ago'
}


int() {
    local value
    printf -v value "%d" ${1/+/} > /dev/null 2>&1

    [[ ${value} && ${value} == ${1/+/} ]] && \
        echo $value
}

ina() {
    local value
    value=${1:-undefined}; shift

    while [ -n "$1" ]; do
        [[ "$value" == "$1" ]] && \
            echo "true" && break
        shift
    done
}


xrdbq() {
    xrdb -query | grep -w "${1}:" | cut -f 2
}


rgb() {
    [[ ${#1} == 7 && ${1:0:1} == "#" ]] && \
        printf -v RGB "%03d:%03d:%03d" 0x${1:1:2} 0x${1:3:2} 0x${1:5:2} > /dev/null 2>&1 && \
        echo -e ${RGB} && return

    [[ ! "${2}" ]] && \
        echo -e "\033[31mInvalid color '${1}', terminate\033[0m" >&2 && \
        kill $$
}

rgbval() {
    _=$(rgb "${1}")

    printf -v r "%d" 0x${1:1:2} > /dev/null 2>&1 || ERROR=true
    printf -v g "%d" 0x${1:3:2} > /dev/null 2>&1 || ERROR=true
    printf -v b "%d" 0x${1:5:2} > /dev/null 2>&1 || ERROR=true
    printf -v value "%d" ${2} > /dev/null 2>&1   || ERROR=true

    if [[ $r -eq 0 && $g -eq 0 && $b -eq 0 ]]; then
        r=1; g=1; b=1
    fi

    max=$r
    [[ $g -gt $max ]] && max=$g
    [[ $b -gt $max ]] && max=$b

    v=$(echo "$max / 256 * 100" | bc -l)
    value=$(echo "$v + $value" | bc -l)

    if [[ ! ${ERROR} && ${value} ]]; then
        r=$(echo "($r / $v * $value)" | bc -l 2>/dev/null); r=${r%.*}
        [[ $r -gt 255 ]] && r=255
        [[ $r -lt 0 ]]   && r=0

        g=$(echo "($g / $v * $value)" | bc -l 2>/dev/null); g=${g%.*}
        [[ $g -gt 255 ]] && g=255
        [[ $g -lt 0 ]]   && g=0

        b=$(echo "($b / $v * $value)" | bc -l 2>/dev/null); b=${b%.*}
        [[ $b -gt 255 ]] && b=255
        [[ $b -lt 0 ]]   && b=0
    fi

    [[ ! ${ERROR} ]] && \
        printf "#%02X%02X%02X" $r $g $b && return

    echo -e "\033[31mInvalid color '${1}', terminate\033[0m" >&2 && \
        kill $$
}

ecolor() {
    echo -en "\033[48:2:$(rgb "${1}")m#\033[0m"
    echo -en "\033[38:2:$(rgb "${1}")m${1:1}\033[0m"
}


preview_theme() {
    if [[ ! ${SHORT_PREVIEW} ]]; then
        [[ ${COLOR[name]} ]] && \
            printf "%-15s%s\n"      "Name:"         "${COLOR[name]}"

        [[ ${NAME} ]] && \
            printf "%-15s%s\n"      "Path:"         "${NAME/$HOME/\~}"

        [[ ${COLOR[description]} ]] && \
            printf "%-15s%s...\n"   "Description:"  "${COLOR[description]:0:54}"

        [[ ${COLOR[image]} ]] && \
            printf "%-15s%s\n"      "Image:"        "${COLOR[image]}"

        [[ ${GTK_THEME_NAME} ]] && \
            printf "%-15s%s\n"      "Gtk theme:"    "${GTK_THEME_NAME}"

        [[ ${GTK_ICON_THEME_NAME} ]] && \
            printf "%-15s%s\n"      "Icons theme:"  "${GTK_ICON_THEME_NAME}"

        [[ ${GTK_FONT_NAME} ]] && \
            printf "%-15s%s\n"      "Font name:"    "${GTK_FONT_NAME}"

        echo -e "$(printf '─%.0s' {1..72})"

        printf '%-68s%s\n' \
            "background: $(ecolor ${COLOR[background]:-${COLOR[0]}})" \
            "selection_background: $(ecolor ${COLOR[selection_background]:-${COLOR[7]}})"
        printf '%-68s%s\n' \
            "foreground: $(ecolor ${COLOR[foreground]:-${COLOR[15]}})" \
            "selection_foreground: $(ecolor ${COLOR[selection_foreground]:-${COLOR[0]}})"
        printf '%-68s%-68s%-70s\n' \
            "cursor:     $(ecolor ${COLOR[cursor]:-${COLOR[8]}})" \
            "url_color: $(ecolor ${COLOR[url_color]:-${COLOR[12]}})" \
            "highlight: $(ecolor ${COLOR[highlight]:-${COLOR[9]}})"

        echo -e "$(printf '─%.0s' {1..72})"

        echo -e "   BLK      RED      GRN      YEL      BLU      MAG      CYN      WHT"
        echo -e "$(printf '─%.0s' {1..72})"
    else
        name=$(basename ${NAME:-UNKNOWN})
        len=$(echo "72 - ${#name} - 4" | bc -s)

        echo -en `printf '─%.0s' $(seq $len)`
        echo -e "[ ${name} ]"
    fi


    echo -en "\033[48:2:$(rgb "${COLOR[background]:-${COLOR[0]}}")m"
    for i in {0..7}; do
        [[ "${COLOR[$i]}" == "${COLOR[background]:-${COLOR[0]}}" ]] && \
            echo -en "\033[38:2:$(rgb "#FFFFFF")m${COLOR[$i]}  " || \
            echo -en "\033[38:2:$(rgb "${COLOR[$i]}")m${COLOR[$i]}  "
    done
    echo -e "\033[0m"

    echo -en "\033[48:2:$(rgb "${COLOR[background]:-${COLOR[0]}}")m"
    for i in {8..15}; do
        [[ "${COLOR[$i]}" == "${COLOR[background]:-${COLOR[0]}}" ]] && \
            echo -en "\033[38:2:$(rgb "#FFFFFF")m${COLOR[$i]}  " || \
            echo -en "\033[38:2:$(rgb "${COLOR[$i]}")m${COLOR[$i]}  "
    done
    echo -e "\033[0m"

    [[ ! ${SHORT_PREVIEW} ]] && echo -e "$(printf '─%.0s' {1..72})"
}


install_theme() {
    SRCE="${1}"
    DEST="${2}"

    [[ ! -f "$SRCE" ]] && \
        echo -e "\033[32m[-] Template $SRCE not existing!\033[0m" && \
        return

    rm -f $DEST > /dev/null 2>&1
    mkdir -p "$(dirname $DEST)" > /dev/null 2>&1

    while IFS=\# read -r data end; do
        data=$(eval echo -e \"${data//\"/\\\"}\")
        end=$(eval echo -e \"${end//\"/\\\"}\")


        [[ "$end" ]] && end="#$end"
        [[ "$data$end" ]] && echo -e "$data$end" >> $DEST
    done < $SRCE
}


set_background() {
    local top

    [[ ! -e ${1} ]] && \
        echo -e "\033[31mImage file '${1/$HOME/\~}' not existing\033[0m" >&2 && \
        kill $$

    top=$(int ${2})
    top=${top:-120}

    [[ $top -lt 0 ]] && \
        echo -e "\033[31mInvalid fade value\033[0m" >&2 && \
        kill $$

    SIZE=( $(identify -ping -format '%w %h' "${IMAGE}") )

    X=$(xrandr --query | grep "*+"); X=( $(echo "${X/x/ }") )
    WIDTH=${X[0]:-1920}
    HEIGHT=${X[1]:-1080}

    # Chech width scale
    W=$WIDTH
    H=$(echo "${SIZE[1]} / $(echo "${SIZE[0]} / $WIDTH"  | bc -l)" | bc -s)

    if [[ $H -lt $HEIGHT ]]; then
        H=$HEIGHT
        W=$(echo "${SIZE[0]} / $(echo "${SIZE[1]} / $HEIGHT"  | bc -l)" | bc -s)
    fi

    L=$(echo "($W - $WIDTH)  / 2" | bc -s)
    T=$(echo "($H - $HEIGHT) / 2" | bc -s)

    convert "${1}" -resize ${W}x${H} -crop ${WIDTH}x${HEIGHT}+${L}+${T} \
        "/tmp/tmp-Wallpaper.jpg"

    convert "/tmp/tmp-Wallpaper.jpg" -resize ${WIDTH}x${HEIGHT}\
        \( -size ${WIDTH}x${top} gradient:'rgba(0,0,0,1)-rgba(0,0,0,0)' \) \
        -geometry +0+0 -compose over -composite \
        \( -size ${WIDTH}x${top} gradient:'rgba(0,0,0,0)-rgba(0,0,0,1)' \) \
        -geometry +0+$(echo "$HEIGHT - $top" | bc -s) -compose over -composite \
        "$HOME/.wallpaper.jpg"

    rm -rf "/tmp/tmp-Wallpaper.jpg" > /dev/null 2>&1

    ${BACKGROUND_SETTER:-feh --bg-fill} "$HOME/.wallpaper.jpg" 2>/dev/null
}



# -----------------------------------------------------------------------------
# run in library mode?
# -----------------------------------------------------------------------------
[[ ${MANAGE_E8CBAA_LIB} ]] && exit 0


# Initialise
BASE="$(realpath `dirname "$0"`)"
TEMPLATES="$BASE/templates"
AVAILABLE=( $(ls $BASE/schemes) )
CACHE="$HOME/.cache/colors"
DIFF=$(date '+%s')

mkdir -p "$CACHE" > /dev/null 2>&1
source "$BASE/config" > /dev/null 2>&1

declare -A _colors=()

# Restore current color scheme
CURRENT="$CACHE/theme.$(hostname)"

echo -e "declare -A COLOR\nexport COLOR=(" > $CURRENT
for i in ${COLOR_KEYS[@]}; do
    [[ $(int $i) ]] && \
        cl=$(xrdbq "color$i") || cl=$(xrdbq "*.$i")

    [[ ${cl} ]] && echo -e "\t[$i]=\"$cl\"" >> $CURRENT
done
echo -e ")" >> $CURRENT

# Load main config
[[ -e "$BASE/config" ]] && source "$BASE/config"


# Parse command-line args
while [ -n "$1" ]; do
	case "${1}" in
    install)
        INSTALL=yes
        ;;

    --color|-c)
        [[ ! $(ina "${2}" ${COLOR_KEYS[@]}) ]] && \
            echo -e "\033[31mInvalid parameter '${2}' from ${1} argument\033[0m" && exit 1

        [[ ! $(rgb "${3}" --no-kill) ]] && \
            echo -e "\033[31mInvalid color '${3}' from ${1} argument\033[0m" && exit 1
        
        _colors[${2}]="${3}"
        shift; shift
        ;;

    --saturation|-s)
        VAL=$(int ${2:-"undefined"})
        [[ ! $VAL || $VAL -gt 100 || $VAL -lt -100 ]] && \
            echo -e "\033[31mInvalid parameter '${2}' from ${1} argument\033[0m" && exit 1

        SATURATION=$VAL
        shift
        ;;

    --relative-saturation|-S)
        RELATIVE_SATURATION=true
        ;;

    --black|-b)
        VAL=$(int ${2:-"undefined"})
        [[ ! $VAL || $VAL -gt 100 || $VAL -lt -100 ]] && \
            echo -e "\033[31mInvalid parameter '${2}' from ${1} argument\033[0m" && exit 1

        _BLACK_VALUE=$VAL
        shift
        ;;

    --font|-f)
        [[ ! ${2} || ${2:0:1} == "-" ]] && \
            echo -e "\033[31mInvalid parameter '${2}' from ${1} argument\033[0m" && exit 1

        _GTK_FONT_NAME="${2}"
        shift
        ;;

    --config|-C)
        [[ ! -e "${2/\~/$HOME}" ]] && \
            echo -e "\033[31mInvalid '${2/\~/$HOME}' config file\033[0m" && exit 1

        CONFIG="${2/\~/$HOME}"
        shift
        ;;

    --image|-I)
        [[ ! -e "${2/\~/$HOME}" ]] && \
            echo -e "\033[31mImage file '${2/\~/$HOME}' not existing\033[0m" && exit 1

        IMAGE="${2/\~/$HOME}"
        shift
        ;;

    --set-bg)
        VAL=$(int ${2})
        [[ $VAL ]] && shift

        SET_BACKGROUND=${VAL:-120}
        ;;

    --light)
        GTK_APPLICATION_PREFER_DARK_THEME=0
        ;;
    --dark)
        GTK_APPLICATION_PREFER_DARK_THEME=1
        ;;

    --short)
        export SHORT_PREVIEW=true
        ;;
    --purge)
        rm -rf $CACHE/config.*
        rm -rf $CACHE/theme.*
        ;;
	--help|-h)
		echo -e "$USAGE"
        exit 0
		;;
    --list|-l)
        echo -e "${AVAILABLE[@]}"
        exit 0
        ;;
    --cls|-)
        CLEAN_THEME_PREVIEW=true
        ;;
	*)
		NAME="${1/\~/$HOME}"
        [[ ${NAME:0:1} == "-" ]] && \
            echo -e "\033[31mInvalid parametr '$NAME'!!!\033[0m\n" && \
            echo -e "$USAGE" && exit 1
		;;
	esac
    shift
done


# Set background image
if [[ ${SET_BACKGROUND} ]]; then
    [[ ! ${IMAGE} ]] && \
        echo -e "\033[31mPlease specify the image first with --image\033[0m" && exit 1

    set_background "$IMAGE" ${SET_BACKGROUND:-400}
fi

# Select prefered brightnest variant
LIGHT=true
BRIGHT_VARIANT=""
if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} == 1 ]]; then
    LIGHT=false
    BRIGHT_VARIANT="-dark"
fi

# Get theme from image file
if [[ ${IMAGE} ]]; then
    [[ ! -e ${IMAGE} ]] && \
        echo -e "\033[31mImage file '${IMAGE}' not existing\033[0m" && exit 1

    new_theme=$(mktemp -u "$CACHE/theme.XXXXXXXXX")
    $BASE/bin/wal.py "${IMAGE}" $LIGHT "$new_theme"

    NAME="$new_theme"
fi

# Resolve colors theme name
NAME=${NAME:-${CURRENT}}

if [[ ! -f "$NAME" ]]; then
	NAME="$BASE/schemes/$NAME"

	[[ ! -f "${NAME}" ]] && \
		echo -e "\033[31mColor theme '$NAME' not existing!\033[0m\n" && \
		echo -e "$USAGE" && exit 1
fi

# Load color theme
unset      COLOR
declare -A COLOR
source    "$NAME"

ORIGIN_BLACK=${COLOR[0]}



# Preview without external config
[[ ${CLEAN_THEME_PREVIEW} ]] && preview_theme


# Set saturation
if [[ ${SATURATION} ]]; then
    for i in {0..15}; do
        COLOR[$i]=$(rgbval "${COLOR[$i]}" $SATURATION)
    done
fi


# Set specials colors
[[ ${COLOR[foreground]} ]]              || COLOR[foreground]=${COLOR[15]:-#FFFFFF}
[[ ${COLOR[background]} ]]              || COLOR[background]=${COLOR[0]:-#000000}
[[ ${COLOR[cursor]} ]]                  || COLOR[cursor]=${COLOR[8]:-#FFFFFF}
[[ ${COLOR[highlight]} ]]               || COLOR[highlight]=${COLOR[9]:-#FF0000}
[[ ${COLOR[url_color]} ]]               || COLOR[url_color]=${COLOR[12]:-#0000FF}
[[ ${COLOR[selection_foreground]} ]]    || COLOR[selection_foreground]=${COLOR[0]:-#000000}
[[ ${COLOR[selection_background]} ]]    || COLOR[selection_background]=${COLOR[7]:-#FFFFFF}


# Load main config (theme config parameters is replaced by this)
if [[ -e ${CONFIG} ]]; then
    source $CONFIG
else
    [[ -e "$BASE/config" ]] && source "$BASE/config"
fi


# Replace defined font and check it
[[ ${_GTK_FONT_NAME} ]] && \
    GTK_FONT_NAME="${_GTK_FONT_NAME}"


# Set color 0 from background color
[[ ${_BLACK_VALUE} ]] && \
    BLACK_VALUE="${_BLACK_VALUE}"

if [[ ${BLACK_VALUE} ]]; then
    COLOR[background]=${ORIGIN_BLACK:-#010101}
    COLOR[0]=$(rgbval "${COLOR[background]}" $BLACK_VALUE)
fi


# Replace defined colors
for i in ${!_colors[@]}; do
    COLOR[$i]=${_colors[$i]}
done

# Set brightnest
for i in {1..7}; do
    j=$(echo "$i + 8" | bc -s)
    [[ ${COLOR[$i]} == ${COLOR[$j]} || ${RELATIVE_SATURATION} ]] && \
        COLOR[$j]=$(rgbval "${COLOR[$i]}" ${BRIGHTNEST:-10})
done


# Default gtk-theme
GTK_THEME_NAME="FlatColor"
# Default icon-theme with colors modified variant
GTK_ICON_THEME_NAME="Tela-${COLOR[cursor]:-default}${BRIGHT_VARIANT}"


# Preview with external config
[[ ! ${CLEAN_THEME_PREVIEW} ]] && preview_theme


#
# Create theme files
#

[[ ! ${INSTALL} ]] && exit 0

echo -e "-- Install theme '${NAME/$HOME/\~}'\n"

# Install XRDB colors
echo -e "[ ] Install xrdb colors"
DEST="$CACHE/xrdb"

install_theme "$TEMPLATES/xrdb" "$DEST"
xrdb -merge "$DEST" && \
    echo -e "[+] Xrdb colors installed"


# Install TERMINALS colors
echo -e "[ ] Install terminals colors"

# kitty terminal
install_theme "$TEMPLATES/kitty.conf" "$CACHE/kitty.colors.conf"

# xfce-termanal
install_theme "$TEMPLATES/xfce4-terminal.theme" "$CACHE/xfce4-terminal.theme"

$BASE/bin/xfce-color-switch "$CACHE/xfce4-terminal.theme" && \
    echo -e "[+] Terminals colors installed"


# Install ROFI colors
echo -e "[ ] Install rofi colors"
install_theme "$TEMPLATES/rofi.rasi" "$CACHE/colors.rasi"
echo -e "[+] Rofi colors installed"


# Install GTK colors
CFG="$HOME/.config"

echo -e "[ ] Install gtk 2.0 colors"
TMPL="$TEMPLATES/gtk-2.0"

install_theme "$TMPL/colorsrc"      "$CFG/gtk-2.0/colorsrc"
install_theme "$TMPL/gtkrc"         "$CFG/gtk-2.0/gtkrc"
echo -e "[+] Gtk colors 2.0 installed"
echo -e "    Append 'export GTK2_RC_FILES=\"\$HOME/.config/gtk-2.0/gtkrc\"'"
echo -e "    to your .profile or replace ~/.gtkrc-2.0 by gtkrc source"

echo -e "[ ] Install gtk 3.0 colors"
install_theme "$TEMPLATES/gtksourceview.xml" \
    "$HOME/.local/share/gtksourceview-3.0/styles/gtksourceview.xml"

TMPL="$TEMPLATES/gtk-3.0"
install_theme "$TMPL/settings.ini"  "$CFG/gtk-3.0/settings.ini"
install_theme "$TMPL/colors.css"    "$CFG/gtk-3.0/colors.css"
install_theme "$TMPL/gtk.css"       "$CFG/gtk-3.0/gtk.css"
echo -e "[+] Gtk colors 3.0 installed"

echo -e "[ ] Install gtk 4.0 colors"
install_theme "$TEMPLATES/gtksourceview.xml" \
    "$HOME/.local/share/gtksourceview-4/styles/gtksourceview.xml"

TMPL="$TEMPLATES/gtk-4.0"
install_theme "$TMPL/settings.ini"  "$CFG/gtk-4.0/settings.ini"
echo -e "[+] Gtk colors 4.0 installed"


# Install GTK theme
if [[ "${GTK_THEME_NAME}" && ! -e "$HOME/.themes/${GTK_THEME_NAME}" ]]; then
    echo -e "[ ] Install gtk theme '${GTK_THEME_NAME}'"

    [[ ! -e "$BASE/themes/${GTK_THEME_NAME:-Empty}.tar.gz" ]] && \
        echo -e "\e[31m[!] Theme '${GTK_THEME_NAME}' not existing\e[0m" && \
        exit 1

    mkdir -p "$HOME/.themes" > /dev/null 2>&1
    tar -xzf "$BASE/themes/${GTK_THEME_NAME}.tar.gz" -C "$HOME/.themes"

    echo -e "[+] Gtk theme '${GTK_THEME_NAME}' installed"
fi


# Install Icons theme
SRC_GTK_ICON_THEME_NAME=( ${GTK_ICON_THEME_NAME/\-\#/ } )

if [[ "${SRC_GTK_ICON_THEME_NAME}" && ! -e "$HOME/.icons/${GTK_ICON_THEME_NAME:-unknown}" ]]; then
    echo -e "[ ] Install icons theme '${GTK_ICON_THEME_NAME}'"

    [[ ! -e "$BASE/icons/${SRC_GTK_ICON_THEME_NAME:-Empty}.tar.gz" ]] && \
        echo -e "\e[31m[!] Icons theme '${GTK_ICON_THEME_NAME}' not existing\e[0m" && \
        exit 1

    THEME_DIR="$HOME/.icons/${SRC_GTK_ICON_THEME_NAME}"

    mkdir -p "$HOME/.icons" > /dev/null 2>&1
    rm   -rf "$THEME_DIR"   > /dev/null 2>&1
    tar -xzf "$BASE/icons/${SRC_GTK_ICON_THEME_NAME}.tar.gz" -C "$HOME/.icons"

    [[ ! -e "$THEME_DIR" ]] && \
        echo -e "\e[31m[!] Icons theme '${SRC_GTK_ICON_THEME_NAME}' not prepeared\e[0m" && \
        exit 1

    if [[ "$SRC_GTK_ICON_THEME_NAME" != "$GTK_ICON_THEME_NAME" ]]; then
        ERROR=""

        if [[ ${BRIGHT_VARIANT} ]]; then
            sed  -i "s/#565656/#aaaaaa/g" \
                "${THEME_DIR}"/{16,22,24}/actions/*.svg || ERROR=true

            sed  -i "s/#727272/#aaaaaa/g" \
                "${THEME_DIR}"/{16,22,24}/{places,devices}/*.svg || ERROR=true

            sed  -i "s/#555555/#aaaaaa/g" \
                "${THEME_DIR}"/symbolic/{actions,apps,categories,devices,emblems,emotes,mimetypes,places,status}/*.svg || \
                ERROR=true

            [[ ${ERROR} ]] && \
                echo -e "\033[31m  - Dark brightnest variant is not applyed\033[0m" || \
                echo -e "  - Dark brightnest variant is applyed"
        fi

        if [[ ! ${ERROR} ]]; then
            sed  -i "s/#5294E2/${COLOR[cursor]}/gi" \
                "${THEME_DIR}"/scalable/places/default-*.svg || ERROR=true

            sed  -i "s/#66bcff/$(rgbval "${COLOR[cursor]}" +10)/gi" \
                "${THEME_DIR}"/scalable/places/default-*.svg || ERROR=true

            sed  -i "s/#b29aff/$(rgbval "${COLOR[cursor]}" +20)/gi" \
                "${THEME_DIR}"/scalable/places/default-*.svg || ERROR=true

            sed  -i "s/#5294E2/${COLOR[cursor]}/gi" \
                "${THEME_DIR}"/16/places/folder*.svg || ERROR=true

            [[ ${ERROR} ]] && \
                echo -e "\033[31m  - Folder colors variant ${COLOR[cursor]} is not applyed\033[0m" || \
                echo -e "  - Folder colors variant ${COLOR[cursor]} is applyed"
        fi

        if [[ ! ${ERROR} ]]; then
            mv "$THEME_DIR" "$HOME/.icons/$GTK_ICON_THEME_NAME" || ERROR=true
        fi

        [[ ${ERROR} ]] && \
            echo -e "\e[31m[-] Icons theme '${SRC_GTK_ICON_THEME_NAME}' not installed\e[0m" && \
            exit 1
    fi

    echo -e "[+] Icons theme '${GTK_ICON_THEME_NAME}' installed"
fi


# Store Shell colors
DEST="$CACHE/colors.sh"
echo -e "[ ] Store shell colors theme '${DEST/$HOME/\~}'"

echo -e "# Shell colors" >  "$DEST"
echo -e ""               >> "$DEST"

for i in ${COLOR_KEYS[@]}; do
    [[ $(int $i) ]] && \
        echo -e "color$i='${COLOR[$i]}'" >> "$DEST" || \
        echo -e "color_$i='${COLOR[$i]}'" >> "$DEST"
done

echo -e "[+] Shell colors theme stored to '${DEST/$HOME/\~}'"


# Store telegram theme
echo -e "[ ] Store telegram colors theme"
$BASE/bin/telegram-palette-gen \
    --palette  "$CACHE/colors.sh" \
    --template "$TEMPLATES/colors.tpg-constants"
echo -e "[+] Telegram colors theme is stored"


# Save last config
KEYS=(
    GTK_THEME_NAME 
    GTK_ICON_THEME_NAME
    GTK_FONT_NAME
    GTK_CURSOR_THEME_SIZE
    GTK_TOOLBAR_STYLE
    GTK_TOOLBAR_ICON_SIZE
    GTK_BUTTON_IMAGES
    GTK_MENU_IMAGES
    GTK_DECORATION_LAYOUT    
    GTK_ENABLE_EVENT_SOUNDS
    GTK_ENABLE_INPUT_FEEDBACK_SOUNDS
    GTK_XFT_ANTIALIAS
    GTK_XFT_HINTING
    GTK_XFT_HINTSTYLE
    GTK_XFT_RGBA
)

f=$(mktemp "$CACHE/config.XXXXXXXXX")

echo "#!/usr/bin/env bash" > "$f"

for i in ${KEYS[@]}; do
    value="${!i}"
    [[ ${value} ]] && echo "$i=\"$value\"" >> "$f"
done

echo "# colors" >> "$f"
for i in ${!COLOR[@]}; do
    echo "COLOR[$i]=\"${COLOR[$i]}\"" >> "$f"
done

echo -e "[+] Your configuration stored at '${f/$HOME/\~}' file"

# Restart wm
bspc wm -r

DIFF=$((`date '+%s'` - $DIFF))
echo -e ""
echo -e "\033[32mCompleted with $(displaytime $DIFF)...\033[0m"
