#!/usr/bin/env bash

# Initialise
BASE="$(realpath "$(dirname "$0")")"
TEMPLATES="$BASE/templates"
AVAILABLE=( $(ls $BASE/schemes) )
CACHE="$HOME/.cache/colors"
DIFF=$(date '+%s')

source "$BASE/bin/rgb-util"
source "$BASE/inc/manage.core.sh"

mkdir  -p "$CACHE" > /dev/null 2>&1
[[ -e "$BASE/config" ]] && source "$BASE/config"


# Restore current color scheme from xrdb
for i in ${COLOR_KEYS[@]}; do
    [[ $(isint $i) ]] && \
        cl=$(xrdbq "color$i") || cl=$(xrdbq "*.$i")

    [[ ${cl} && $(isrgb "$cl") ]] && \
        COLOR[$i]="$cl"
done


# Reload main config
[[ -e "$BASE/config" ]] && source "$BASE/config"

# Parse command-line args
source "$BASE/inc/manage.args.sh"


# Select prefered brightnest variant
LIGHT=true
BRIGHT_VARIANT=""
if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} == 1 ]]; then
    LIGHT=false
    BRIGHT_VARIANT="-dark"
fi


if [[ ${COLOR_BLACK_BASE} ]]; then
    unset COLOR; declare -A COLOR

    hsv=( $(rgb_to_hsv $COLOR_BLACK_BASE) )
    vstep=$(( (100 - ${hsv[2]}) / 7 ))

    COLOR[0]=$COLOR_BLACK_BASE
    COLOR[8]=$(rgb_saturation $(rgb_value $COLOR_BLACK_BASE \
        "+$(round $(echo "$vstep * 2.33" | bc -l))%") $(( ${hsv[1]} / 2 )))

    for i in {1..7}; do
        new=$(rgb_value $COLOR_BLACK_BASE "+$(( $i * $vstep))%")
        COLOR[$i]=$new
        COLOR[$(( $i + 8 ))]=$new
    done

    if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} != 1 ]]; then
        _color_0=$(get 0)
        COLOR[0]=$(get 7)
        COLOR[7]=$_color_0
        COLOR[15]=$_color_0
    fi

    NAME="bb-${COLOR_BLACK_BASE}"

# Create scheme from image file
elif [[ ${IMAGE} ]]; then
    [[ ! -e "${IMAGE/\~/$HOME}" ]] && \
        fatal "Image file '${IMAGE/\~/$HOME}' not existing"

    NAME=$(mktemp -u "$CACHE/theme.XXXXXXXXX")
    $BASE/bin/wal.py "${IMAGE/\~/$HOME}" ${LIGHT} "$NAME" || \
        fatal "Error of generating color theme"

    unset COLOR; declare -A COLOR
    source "${NAME/\~/$HOME}"

# Load selected colors scheme
elif [[ ${NAME} ]]; then
    if [[ ! -f "${NAME/\~/$HOME}" ]]; then
        NAME="$BASE/schemes/$NAME"

        [[ ! -f "${NAME}" ]] && \
            fatal "Color scheme '$NAME' not existing!"
    fi

    unset COLOR; declare -A COLOR
    source "${NAME/\~/$HOME}"

# Resolve colors scheme name
else
    NAME="xrdb"
fi


# Preview without modifiers
[[ ${CLEAN_THEME_PREVIEW} ]] && preview_theme


# Set color hue: position in the spectrum {0..360}
if [[ ${RGB_HUE} ]]; then
    for i in {0..15}; do
        COLOR[$i]=$(rgb_hue "$(get $i)" $RGB_HUE)
    done
fi

# Set color saturation: color saturation ("purity") {0..100}
if [[ ${RGB_SATURATION} ]]; then
    for i in {0..15}; do
        COLOR[$i]=$(rgb_saturation "$(get $i)" $RGB_SATURATION)
    done
fi

# Set color value: color brightness {0..100}
if [[ ${RGB_VALUE} ]]; then
    for i in {0..15}; do
        COLOR[$i]=$(rgb_value "$(get $i)" $RGB_VALUE)
    done
fi


# Load main config (theme config parameters is replaced by this)
if [[ ${CONFIG} ]]; then
    [[ ! -e ${CONFIG/\~/$HOME} ]] && \
        fatal "Configuration '${CONFIG/\~/$HOME}' not existing"

    source "${CONFIG/\~/$HOME}"
    NAME="$(basename "${CONFIG/\~/$HOME}")"
else
    [[ -e "$BASE/config" ]] && source "$BASE/config"
fi


# Replace defined colors
for i in ${!_colors[@]}; do
    [[ ${_colors[$i]} ]] && \
        COLOR[$i]=${_colors[$i]}
done


# Set background to black and modify black color value
[[ ${_BLACK_VALUE} ]] && \
    BLACK_VALUE="${_BLACK_VALUE}"

if [[ ${BLACK_VALUE} ]]; then
    COLOR[background]="$(get 0)"
    COLOR[0]=$(rgb_value "$(get background)" $BLACK_VALUE)
fi

# Set background color from modified black color
[[ ${_BACKGROUND_VALUE} ]] && \
    BACKGROUND_VALUE="${_BACKGROUND_VALUE}"

if [[ ${BACKGROUND_VALUE} ]]; then
    COLOR[background]=$(rgb_value "$(get 0)" $BACKGROUND_VALUE)
fi


# Set relative colors value
if [[ ! ${NO_RELATIVE_VALUE} ]]; then
    for i in {1..7}; do
        j=$(( $i + 8 ))
        [[ $(get $i) == $(get $j) || ${RELATIVE_VALUE} ]] && \
            COLOR[$j]=$(rgb_value "$(get $i)" ${BRIGHTNEST:-"+10%"})
    done
fi


# Set specials colors
fill_special_colors --fill-missing-items 


# Hardcode set gtk-theme and icon-theme
# Default gtk-theme
GTK_THEME_NAME="FlatColor"
# Default icon-theme with colors modified variant
GTK_ICON_THEME_NAME="Tela-$(get cursor)${BRIGHT_VARIANT}"
# Replace defined font and check it
[[ ${_GTK_FONT_NAME} ]] && \
    GTK_FONT_NAME="${_GTK_FONT_NAME}"


# Preview with all modifiers
[[ ! ${CLEAN_THEME_PREVIEW} ]] && preview_theme


#
# Install theme files
#

# Set background image
if [[ ${SET_WALLPAPER} ]]; then
    [[ ! ${IMAGE} ]] && \
        error "Please specify the image first with --image" && exit 1

    $BASE/bin/setwal "$IMAGE" --fade-top ${SET_WALLPAPER:-80} \
        $([[ ! ${BRIGHT_VARIANT} ]] && echo "--light")
fi


[[ ! ${INSTALL} ]] && exit 0

echo -e "-- Install theme '${NAME/$HOME/\~}'\n"

# Install XRDB colors
normal "[ ] Install xrdb colors"
install_xrdb_colors && \
    success "[+] Xrdb colors installed" || \
    error   "[-] Xrdb colors not installed"


# Install TERMINALS colors
normal "[ ] Install terminals colors"
install_terminals_colors && \
    success "[+] Terminals colors installed" || \
    error   "[-] Terminals colors not installed"


# Install ROFI colors
normal "[ ] Install rofi colors"
apply "$TEMPLATES/rofi.rasi" "$CACHE/colors.rasi" && \
    success "[+] Rofi colors installed" || \
    error   "[-] Rofi colors not installed"


# Install GTK colors
normal "[ ] Install gtk 2.0 colors"
install_gtk2_colors && \
    success "[+] Gtk 2.0 colors installed" || \
    error   "[-] Gtk 2.0 colors not installed"


normal "[ ] Install gtk 3.0 colors"
install_gtk3_colors && \
    success "[+] Gtk 3.0 colors installed" || \
    error   "[-] Gtk 3.0 colors not installed"


normal "[ ] Install gtk 4.0 colors"
install_gtk4_colors && \
    success "[+] Gtk 4.0 colors installed" || \
    error   "[-] Gtk 4.0 colors not installed"


# Install GTK theme
if [[ "${GTK_THEME_NAME}" && ! -e "$HOME/.themes/${GTK_THEME_NAME}" ]]; then
    normal "[ ] Install gtk theme '${GTK_THEME_NAME}'"
    install_gtk_theme "${GTK_THEME_NAME}" && \
        success "[+] Gtk theme '${GTK_THEME_NAME}' installed" || \
        error   "[-] Gtk theme '${GTK_THEME_NAME}' not installed"
fi


# Install Icons theme
if [[ "${GTK_ICON_THEME_NAME}" && ! -e "$HOME/.icons/${GTK_ICON_THEME_NAME:-unknown}" ]]; then
    echo -e "[ ] Install icons theme '${GTK_ICON_THEME_NAME}'"
    install_gtk_icon_theme "${GTK_ICON_THEME_NAME}" "${BRIGHT_VARIANT}" && \
        success "[+] Icons theme '${GTK_ICON_THEME_NAME}' installed"    || \
        error   "[-] Icons theme '${GTK_ICON_THEME_NAME}' not installed"
fi


# Store Shell colors
normal "[ ] Store shell colors theme"
install_shell_colors "$CACHE/colors.sh" && \
    success "[+] Shell colors theme stored to '${CACHE/$HOME/\~}/colors.sh'" || \
    fatal   "[-] Shell colors theme is not stored"


# Store telegram theme
normal "[ ] Store telegram colors theme"
$BASE/bin/telegram-palette-gen \
    --palette  "$CACHE/colors.sh" \
    --template "$TEMPLATES/colors.tpg-constants"  && \
    success "[+] Telegram colors theme is stored" || \
    error   "[-] Telegram colors theme is not stored"


# Save last config
normal "[ ] Save your configuration"
CC_CONF=$(mktemp "$CACHE/config.XXXXXXXXX")
store_configuration "$CC_CONF" && \
    success "[+] Your configuration is saved to '${CC_CONF/$HOME/\~}' file" || \
    error   "[-] Your configuration is not saved"


# Restart wm
bspc wm -r

DIFF=$((`date '+%s'` - $DIFF))
success "\nCompleted with $(displaytime $DIFF)..."
