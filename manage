#!/usr/bin/env bash

# Initialise
BASE="$(realpath "$(dirname "$0")")"
TEMPLATES="$BASE/templates"
AVAILABLE=( $(ls $BASE/schemes) )
CACHE="$HOME/.cache/colors"
DIFF=$(date '+%s')

mkdir  -p "$CACHE" > /dev/null 2>&1

source "$BASE/bin/rgb"
source "$BASE/inc/manage.core.sh"

# Restore current color scheme from xrdb
for i in ${COLOR_KEYS[@]}; do
    [[ $(isint $i) ]] && \
        cl=$(xrdbq "color$i") || cl=$(xrdbq "*.$i")

    [[ ${cl} && $(isrgb "$cl") ]] && \
        COLOR[$i]="$cl"
done

# Parse command-line args
source "$BASE/inc/manage.args"

# Select prefered brightnest variant
LIGHT=true
BRIGHT_VARIANT=""
if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} == 1 ]]; then
    LIGHT=false
    BRIGHT_VARIANT="-dark"
fi


# Create scheme from image file
if [[ ${IMAGE} ]]; then
    [[ ! -e "${IMAGE/\~/$HOME}" ]] && \
        fatal "Image file '${IMAGE/\~/$HOME}' not existing"

    NAME=$(mktemp -u "$CACHE/theme.XXXXXXXXX")
    $BASE/bin/wal.py "${IMAGE/\~/$HOME}" ${LIGHT} "$NAME" || \
        fatal "Error of generating color theme"

    unset COLOR; declare -A COLOR
    source "${NAME/\~/$HOME}"

# Load selected colors scheme
elif [[ ${NAME} ]]; then
    if [[ ! -f "${NAME/\~/$HOME}" ]]; then
        NAME="$BASE/schemes/$NAME"

        [[ ! -f "${NAME}" ]] && \
            fatal "Color scheme '$NAME' not existing!"
    fi

    unset COLOR; declare -A COLOR
    source "${NAME/\~/$HOME}"

# Resolve colors scheme name
else
    NAME="xrdb"
fi


# Preview without modifiers
[[ ${CLEAN_THEME_PREVIEW} ]] && preview_theme


# Load main config (theme config parameters is replaced by this)
source "$BASE/inc/defaults.sh"


# Replace defined colors
for i in ${!_commands[@]}; do
    MOD=( ${_commands[$i]} )

    _dst="${MOD[0]}"
    _val="${MOD[1]}"
    _mod="${MOD[2]}"
    _src="${MOD[3]}"

    #echo -e "cmd: $_dst, $_val, $_mod, $_src"

    case "${_dst}" in
    --hue)
        for i in {0..15}; do
            COLOR[$i]=$(rgb_hue "$(get $i)" "$_val")
        done
        ;;

    --saturation)
        for i in {0..15}; do
            COLOR[$i]=$(rgb_saturation "$(get $i)" "$_val")
        done
        ;;

    --value)
        for i in {0..15}; do
            COLOR[$i]=$(rgb_value "$(get $i)" "$_val")
        done
        ;;

    --relative)
        for i in {1..7}; do
            j=$(( $i + 8 ))
            COLOR[$j]=$(rgb_value "$(get $i)" "$_val")
        done
        ;;

    --mode)
        if [[ ${_val} == 1 ]]; then
            _base=$(get 0)
            COLOR[background]="${_base}"

            if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} == 1 ]]; then
                COLOR[0]=$(rgb_value "${_base}" "+10")
                COLOR[8]=$(rgb_value "${_base}" "+25")
            else
                COLOR[0]=$(rgb_value "${_base}" "-10")
                COLOR[8]=$(rgb_value "${_base}" "-25")
            fi

        elif [[ ${_val} == 2 ]]; then
            _base=$(get 0)

            if [[ ${GTK_APPLICATION_PREFER_DARK_THEME:-1} == 1 ]]; then
                COLOR[background]=$(rgb_value "${_base}" "-10")
                COLOR[8]=$(rgb_value "${_base}" "+15")
            else
                COLOR[background]=$(rgb_value "${_base}" "+10")
                COLOR[8]=$(rgb_value "${_base}" "-15")
            fi

        elif [[ ${_val} ]]; then
            fatal "Invalid mode '${_val}' from auto resolve colors"
            exit 1
        fi
        ;;

    --fill)
        fill_special_colors
        ;;

    *)
        [[ ! $(isrgb "$_src") ]] && \
            _src="$(get "$_src")"

        COLOR[$_dst]="$_src"
        
        if [[ $(isparsed_value "$_val") ]]; then
            [[ "Hh" == *"$_mod"* ]] && \
                COLOR[$_dst]=$(rgb_hue "$_src" "$_val")

            [[ "Ss" == *"$_mod"* ]] && \
                COLOR[$_dst]=$(rgb_saturation "$_src" "$_val")

            [[ "Vv" == *"$_mod"* ]] && \
                COLOR[$_dst]=$(rgb_value "$_src" "$_val")
        fi
        ;;
    esac
done


# Set specials colors
fill_special_colors --fill-missing-items 


# Preview with all modifiers
[[ ! ${CLEAN_THEME_PREVIEW} ]] && preview_theme


# Save scheme to path
if [[ ${SAVE_SCHEME} ]]; then
    normal "[ ] Save scheme to '${SAVE_SCHEME/$HOME/\~}'"
    apply "$TEMPLATES/default.scheme" "${SAVE_SCHEME}" && \
        success "[+] Scheme is saved" || \
        error   "[-] Scheme is not saved"
fi

exit 0

# Install theme
if [[ ${INSTALL} ]]; then
    source "$BASE/inc/manage.installers.sh"
    source "$BASE/inc/manage.install"

    DIFF=$((`date '+%s'` - $DIFF))
    success "\nCompleted with $(displaytime $DIFF)..."

    # Restart wm
    [[ "${DESKTOP_SESSION}" == "bspwm" ]] && \
        bspc wm -r
fi
