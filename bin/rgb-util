#!/usr/bin/env bash

# is using as library
[[ "${0}" != "${BASH_SOURCE}" ]] && \
    RGB_UTIL_1EBE2_LIB=true || RGB_UTIL_1EBE2_LIB=""


# -----------------------------------------------------------------------------
# Notify functions
# -----------------------------------------------------------------------------

normal() {
    [[ $(tput colors) -eq 256 ]] && \
        echo -e "\033[38;2;208;208;208m${@}\033[0m" >&2 || \
        echo -e "\033[37m${@}\033[0m" >&2
}

success() {
    [[ $(tput colors) -eq 256 ]] && \
        echo -e "\033[38;2;144;165;126m${@}\033[0m" >&2 || \
        echo -e "\033[32m${@}\033[0m" >&2
}

warning() {
    [[ $(tput colors) -eq 256 ]] && \
        echo -e "\033[38;2;215;157;101m${@}\033[0m" >&2 || \
        echo -e "\033[33m${@}\033[0m" >&2
}

error() {
    [[ $(tput colors) -eq 256 ]] && \
        echo -e "\033[38;2;162;102;102m${@}\033[0m" >&2 || \
        echo -e "\033[31m${@}\033[0m" >&2
    [[ ${ERROR_IS_FATAL} ]] && \
        kill $$ && exit 1
}

fatal() {
    [[ $(tput colors) -eq 256 ]] && \
        echo -e "\033[38;2;207;0;0m${@}\033[0m" >&2 || \
        echo -e "\033[31;1m${@}\033[0m" >&2
    kill $$ && exit 1
}


# -----------------------------------------------------------------------------
# Math and utilites
# -----------------------------------------------------------------------------

int() {
    local val=${1%.*}
    local value
    printf -v value "%d" ${val/+/} > /dev/null 2>&1
    [[ ${value} && ${value} == ${val/+/} ]] && \
        echo $value
}

limited() {
    local val=$(int ${1})
    local lim=$(int ${2:-255})

    if [[ ${val} ]]; then
        [[ $val -gt $lim ]] && val=$lim
        [[ $val -lt    0 ]] && val=0
    fi
    echo "$val"
}

min() {
    local MIN
    local next
    for next in ${@}; do
        [[ ! ${MIN} ]] && \
            MIN=$(int ${next}) && continue

        next=$(int ${next})
        [[ $next && "$next" -lt "$MIN" ]] && \
            MIN=${next}
    done
    echo "${MIN}"
}

max() {
    local MAX
    local next
    for next in ${@}; do
        [[ ! ${MAX} ]] && \
            MAX=$(int ${next}) && continue

        next=$(int ${next})
        [[ $next && "$next" -gt "$MAX" ]] && \
            MAX=${next}
    done
    echo "${MAX}"
}

round() {
    local val
    LC_NUMERIC=C printf -v val "%.${2:-0}f" "${1/./,}" 2>/dev/null && \
        echo ${val/,/.}
}

at() {
    local value=${1:-undefined}; shift
    [[ " ${@} " == *" $value "* ]] && \
        echo true
}

xrdbq() {
    xrdb -query | grep -w "${1}:" | cut -f 2
}

function displaytime {
    local T=$1
    local W=$((T/60/60/24/7))
    local D=$((T/60/60/24%7))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))

    if [[ $W > 0 ]]; then
        printf '%d weeks ' $W
        printf '%d days ' $D
    else
        if [[ $D > 0 ]]; then
            printf '%d days ' $D
            printf '%d hours ' $H
        else
            [[ $H > 0 ]] && printf '%d hours ' $H
            [[ $M > 0 ]] && printf '%d minutes ' $M
            [[ $H = 0 ]] && printf '%d seconds ' $S
        fi
    fi
    printf 'ago'
}


# -----------------------------------------------------------------------------
# Colors functions
# -----------------------------------------------------------------------------

# Default colors (Tango theme)
declare -A COLOR=(
    [0]=#282a2e      [8]=#373b41
    [1]=#a54242      [9]=#cc6666
    [2]=#8c9440     [10]=#b5bd68
    [3]=#de935f     [11]=#f0c674
    [4]=#5f819d     [12]=#81a2be
    [5]=#85678f     [13]=#b294bb
    [6]=#5e8d87     [14]=#8abeb7
    [7]=#707880     [15]=#c5c8c6
)

rgb() {
    local RGB
    if [[ ${#1} == 7 && ${1:0:1} == "#" ]]; then
        printf -v RGB "%d %d %d" \
            0x${1:1:2} 0x${1:3:2} 0x${1:5:2} 2>/dev/null && \
            echo "$RGB" && return
    fi
    fatal "Invalid color '${1}'"
}

rgb_to_hex() {
    local r=$(limited ${1})  # integer 0..255
    local g=$(limited ${2})  # integer 0..255
    local b=$(limited ${3})  # integer 0..255
    printf "#%02X%02X%02X" $r $g $b
}

rgb_to_hsv() {
    local RGB=( $(rgb ${1}) )
    local r=${RGB[0]}  # integer 0..255
    local g=${RGB[1]}  # integer 0..255
    local b=${RGB[2]}  # integer 0..255

    local maxc=$(max $r $g $b)
    local minc=$(min $r $g $b)

    # Value: color brightness {0..100}
    local v=$(round $(echo "$maxc / 255 * 100" | bc -l))

    [[ "$minc" == "$maxc" ]] && \
        echo "0 0 $v $l" && return

    # Saturation: color saturation ("purity") {0..100}
    local s=$(round $(echo "($maxc - $minc) / $maxc * 100" | bc -l))

    # Hue: position in the spectrum {0..360}
    local h=0
    local rc=$(echo "($maxc - $r) / ($maxc - $minc)" | bc -l)
    local gc=$(echo "($maxc - $g) / ($maxc - $minc)" | bc -l)
    local bc=$(echo "($maxc - $b) / ($maxc - $minc)" | bc -l)

    if [[ $r == $maxc ]]; then
        h=$(echo "$bc - $gc" | bc -l)
    elif [[ $g == $maxc ]]; then
        h=$(echo "2.0 + $rc - $bc" | bc -l)
    else
        h=$(echo "4.0 + $gc - $rc" | bc -l)
    fi
    h=$(round $(echo "($h / 6.0) * 360" | bc -l))
    
    echo "$h $s $v"
}

hsv_to_rgb() {
    local h=$(( $(int ${1}) % 360 ))
    local s=$(limited ${2} 100)
    local v=$(limited ${3} 100)

    v=$(round $(echo "$v / 100 * 255" | bc -l))
    [[ $s -eq 0 ]] && \
        rgb_to_hex $v $v $v && return

    h=$(echo "$h / 360" | bc -l)
    s=$(echo "$s / 100" | bc -l)

    local i=$(int 0$(echo "$h * 6.0" | bc -s)) # XXX assume int() truncates!
    local f=$(echo "$h * 6.0 - $i" | bc -l)
    local p=$(round $(echo "$v * (1.0 - $s)" | bc -l))
    local q=$(round $(echo "$v * (1.0 - $s * $f)" | bc -l))
    local t=$(round $(echo "$v * (1.0 - $s * (1.0 - $f))" | bc -l))

    i=$(( $i % 6 ))

    [[ $i -eq 0 ]] && \
        rgb_to_hex $v $t $p && return
    [[ $i -eq 1 ]] && \
        rgb_to_hex $q $v $p && return
    [[ $i -eq 2 ]] && \
        rgb_to_hex $p $v $t && return
    [[ $i -eq 3 ]] && \
        rgb_to_hex $p $q $v && return
    [[ $i -eq 4 ]] && \
        rgb_to_hex $t $p $v && return
    [[ $i -eq 5 ]] && \
        rgb_to_hex $v $p $q && return
}


#
# args: <format str> <#color>
#
format() {
    local RGB=( $(rgb "${2}") )
    local HSV=( $(rgb_to_hsv "${2}") )

    local r=${RGB[0]}  # color 0..255
    local g=${RGB[1]}  # color 0..255
    local b=${RGB[2]}  # color 0..255

    local h=${HSV[0]}  # Hue: position in the spectrum 0..360
    local s=${HSV[1]}  # Luminance: color saturation ("purity") 0..100
    local v=${HSV[2]}  # Saturation: color brightness 0..100

    local R=$(printf "%02X" $r)  # hex color 00..FF
    local G=$(printf "%02X" $g)  # hex color 00..FF
    local B=$(printf "%02X" $b)  # hex color 00..FF

    eval "echo -e \"${1}\""
}


rgb_value() {
    local RGB=( $(format '$r $g $b $v' "${1}") )
    local value=$(int ${2})
    local r=${RGB[0]}
    local g=${RGB[1]}
    local b=${RGB[2]}
    local v=${RGB[3]}

    value=$(round $(echo "2.55 * ${value:-0}" | bc -l 2>/dev/null))

    # red
    if [[ "$v" -eq 0 || "$r" -gt 0 ]]; then
        r=$(( $r + ${value:-0} ))
    fi

    # green
    if [[ "$v" -eq 0 || "$g" -gt 0 ]]; then
        g=$(( $g + ${value:-0} ))
    fi

    # blue
    if [[ "$v" -eq 0 || "$b" -gt 0 ]]; then
        b=$(( $b + ${value:-0} ))
    fi

    rgb_to_hex $r $g $b
}

rgb_inverse() {
    local RGB=( $(format '$r $g $b' "${1}") )
    local r=$(( 255 - ${RGB[0]} ))
    local g=$(( 255 - ${RGB[1]} ))
    local b=$(( 255 - ${RGB[2]} ))
    rgb_to_hex $r $g $b
}


# -----------------------------------------------------------------------------
# Any colors utils
# -----------------------------------------------------------------------------

preview() {
    local name=${1:-xrdb}
    local len=$(echo "70 - ${#name} - 4" | bc -s)

    echo -en $(printf '─%.0s' $(seq $len)); echo -e "[ ${name} ]"
    echo -e  "  BLK      RED      GRN      YEL      BLU      MAG      CYN      WHT"
    echo -e  "$(printf '─%.0s' {1..70})"

    for i in {0..7}; do
        printf "\033[38;2;%03d;%03d;%03dm" $(format '$r $g $b' ${COLOR[$i]}) 
        echo -en "$([[ $i -gt 0 ]] && echo "  ")${COLOR[$i]}"
    done
    echo -e "\033[0m"

    for i in {8..15}; do
        printf "\033[38;2;%03d;%03d;%03dm" $(format '$r $g $b' ${COLOR[$i]}) 
        echo -en "$([[ $i -gt 8 ]] && echo "  ")${COLOR[$i]}"
    done
    echo -e "\033[0m"

    echo -e "$(printf '─%.0s' {1..70})"
}



# -----------------------------------------------------------------------------

# run in library mode?
[[ ${RGB_UTIL_1EBE2_LIB} ]] && return

# -----------------------------------------------------------------------------

restore_xrdb_colors() {
    for i in {0..15}; do
        local val=$(format '#${R}${G}${B}' $(xrdbq "color$i"))
        [[ ${val} ]] && \
            COLOR[$i]=$val
    done
}


BASE="$(realpath "$(dirname "$0")")"
RESTORE=true

while [ -n "$1" ]; do
    case "${1}" in
    --default|-d)
        RESTORE=""
        ;;
    --test)
        TESTS=true
        ;;
    *)
        ;;
    esac
    shift
done

[[ ${RESTORE} ]] && restore_xrdb_colors

preview

if [[ ${TESTS} ]]; then
    T=${COLOR[3]}
    echo "rgb($T): $(rgb $T)"
    echo "---"
    echo "rgb_to_hsv($T): $(rgb_to_hsv $T)"
    echo "hsv_to_rgb($(rgb_to_hsv $T)): $(hsv_to_rgb $(rgb_to_hsv $T))"
    echo "---"
    echo "rgb_value(#000000, +10): $(rgb_value "#000000" +10)"
    echo "rgb_value(#220000, +10): $(rgb_value "#220000" +10)"
    echo "rgb_value($T, +10): $(rgb_value $T +10)"
fi
