#!/usr/bin/env bash
[[ ${CORE_LIB_LOADED} ]] && return 0 || CORE_LIB_LOADED=true

LC_ALL=C

PATH="$(dirname "${BASH_SOURCE:-$0}")/../bin:$PATH"

SEARCH_PATH=(
    "$(dirname "${BASH_SOURCE:-$0}")/.."
    "~/.x-theme"
    "~/.local/share/x-theme"
    "/usr/local/share/x-theme"
    "/usr/share/x-theme"
)

# -----------------------------------------------------------------------------
# Dependencies:
# -----------------------------------------------------------------------------

if ! source log.sh 2>/dev/null; then
    echo -e "\033[31mLibrary 'log.sh not found!'\033[0m"
    exit 1
fi

if ! source rgb.sh 2>/dev/null; then
    echo -e "\033[31mLibrary 'rgb.sh not found!'\033[0m"
    exit 1
fi

# -----------------------------------------------------------------------------
# Declarations and Defaults
# -----------------------------------------------------------------------------
DEFAULT_GTK_APPLICATION_PREFER_DARK_THEME=1
DEFAULT_GTK_THEME_NAME='Adwaita'
DEFAULT_GTK_ICON_THEME_NAME='Adwaita'
DEFAULT_GTK_FONT_NAME='Noto Sans Regular 10'
DEFAULT_TERMINAL_FONT_NAME='Monospace Regular 12'
DEFAULT_CURSOR_COLOR='#FFA500'
DEFAULT_THEME_BACKGROUND_VALUE=10
DEFAULT_THEME_COLOR_SCALE=13


declare COLOR_KEYS=(
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    foreground
    background
    cursor
)

declare -A COLOR_WORDS=(
    [black]=0       [blk]=0
    [red]=1         [red]=1
    [green]=2       [grn]=2
    [yellow]=3      [yel]=3
    [blue]=4        [blu]=4
    [magenta]=5     [mag]=5
    [cyan]=6        [cyn]=6
    [white]=7       [wht]=7
)

declare -A COLOR

re_font='^[a-zA-Z\-]+[\ a-zA-Z0-9-]*\ [0-9]+$'

# -----------------------------------------------------------------------------
# Environment access functions
# -----------------------------------------------------------------------------

xrdbq() {
    xrdb -query | grep -w "${1}:" | cut -f 2
}

get_wallpaper() {
    tail -n1 "${HOME}/.fehbg" \
        | awk '{print $NF}' \
        | sed "s/'//g"
}

get_gtk_setting() {
    gtk-query-settings \
        | grep -w ${1}: \
        | sed 's/^.*\:\ *//g' \
        | sed 's/"//g'
}

font_name() {
    echo ${@% *}
}

font_size() {
    echo ${@##* }
}

restore_colors_from_xrdb() {
	local color i

	for i in ${COLOR_KEYS[@]}; do
		isint $i \
			&& color=$(xrdbq "color$i") \
			|| color=$(xrdbq "*.$i")

		if [[ "$color" ]]; then
			isrgb "$color" \
				|| fatal "Invalid imported color '$i' from xrdb"

			COLOR[$i]="$color"
		fi
	done
}

restore_environment_variables() {
	if [[ ! "${GTK_APPLICATION_PREFER_DARK_THEME}" ]]; then
		GTK_APPLICATION_PREFER_DARK_THEME=$(\
			get_gtk_setting 'gtk-application-prefer-dark-theme')
	fi

	GTK_APPLICATION_PREFER_DARK_THEME=$(\
		istrue "${GTK_APPLICATION_PREFER_DARK_THEME:-DEFAULT_GTK_APPLICATION_PREFER_DARK_THEME}" \
			&& echo 1 || echo 0)
	debug "GTK_APPLICATION_PREFER_DARK_THEME: $GTK_APPLICATION_PREFER_DARK_THEME"


	if [[ ! "${GTK_THEME_NAME}" ]]; then
		GTK_THEME_NAME=$(\
			get_gtk_setting 'gtk-theme-name')
	fi

	GTK_THEME_NAME="${GTK_THEME_NAME:-$DEFAULT_GTK_THEME_NAME}"
	debug "GTK_THEME_NAME: $GTK_THEME_NAME"


	if [[ ! "${GTK_ICON_THEME_NAME}" ]]; then
		GTK_ICON_THEME_NAME=$(\
			get_gtk_setting 'gtk-icon-theme-name')
	fi

	GTK_ICON_THEME_NAME="${GTK_ICON_THEME_NAME:-$DEFAULT_GTK_ICON_THEME_NAME}"
	debug "GTK_ICON_THEME_NAME: $GTK_ICON_THEME_NAME"


	if [[ ! "${GTK_FONT_NAME}" ]]; then
		GTK_FONT_NAME=$(\
			get_gtk_setting 'gtk-font-name')
	fi

	GTK_FONT_NAME="${GTK_FONT_NAME:-$DEFAULT_GTK_FONT_NAME}"

    if [[ ! "$GTK_FONT_NAME" =~ $re_font ]]; then
        error "Invalid gtk-font-name: $GTK_FONT_NAME, set default..."
	    GTK_FONT_NAME="$DEFAULT_GTK_FONT_NAME"

        [[ ! "$GTK_FONT_NAME" =~ $re_font ]] \
            && fatal "Invalid gtk-font-name: $GTK_FONT_NAME" \
            && exit 1
    fi

    GTK_FONT_FAMILY="$(font_name "$GTK_FONT_NAME")"
    GTK_FONT_SIZE="$(font_size "$GTK_FONT_NAME")"

    debug "GTK_FONT_FAMILY: $GTK_FONT_FAMILY"
    debug "GTK_FONT_SIZE:   $GTK_FONT_SIZE"


    TERMINAL_FONT_NAME="${TERMINAL_FONT_NAME:-$DEFAULT_TERMINAL_FONT_NAME}"

    if [[ ! "$TERMINAL_FONT_NAME" =~ $re_font ]]; then
        error "Invalid terminal-font-name: $TERMINAL_FONT_NAME, set default..."
	    TERMINAL_FONT_NAME="$DEFAULT_TERMINAL_FONT_NAME"

        [[ ! "$TERMINAL_FONT_NAME" =~ $re_font ]] \
            && fatal "Invalid terminal-font-name: $TERMINAL_FONT_NAME" \
            && exit 1
    fi

    TERMINAL_FONT_FAMILY="$(font_name "$TERMINAL_FONT_NAME")"
    TERMINAL_FONT_SIZE="$(font_size "$TERMINAL_FONT_NAME")"

    debug "TERMINAL_FONT_FAMILY: $TERMINAL_FONT_FAMILY"
    debug "TERMINAL_FONT_SIZE: $TERMINAL_FONT_SIZE"


    CURSOR_COLOR="${CURSOR_COLOR:-$DEFAULT_CURSOR_COLOR}"
    debug "CURSOR_COLOR: $CURSOR_COLOR"
}


init_sh_theme() {
    # Shell variables
    eval "wallpaper='$(get_wallpaper)'"

    # Special
    eval "background='$(get background)'"
    eval "foreground='$(get foreground)'"
    eval "cursor='$(get cursor)'"

    # Colors
    for i in {0..15}; do
        eval "color${i}='$(get $i)'"
    done
}


# -----------------------------------------------------------------------------
# Color access functions
# -----------------------------------------------------------------------------

get_color_key() {
    local KEY=( ${1,,} )

    local REKEY=$(echo "$KEY" | sed 's/[^a-z]//g')

    [[ "${COLOR_WORDS[$REKEY]}" ]] 2>/dev/null \
		&& KEY=${COLOR_WORDS[$REKEY]}

    [[ ${#KEY[@]} -eq 1 && " ${COLOR_KEYS[@]} " == *" $KEY "* ]] \
		&& echo "$KEY" \
		|| echo "UNDEFINED"
}

get() {
    local KEY=$(get_color_key "${1}")
    local color="${COLOR[$KEY]}"

	if [[ "$color" ]]; then
		isrgb "$color" \
			&& echo "$color" && return

		fatal "Invalid stored '${1}' color"
	fi

	case "$KEY" in
		foreground)
			color=$(get 7)
			;;
		background)
			color=$(get 0)
			;;
		cursor)
			color="${CURSOR_COLOR}"
            ;;
		*)
			isint "$KEY" \
				&& color=${COLOR[$(( $KEY - 8 ))]}
			;;
	esac

	isrgb "$color" \
		&& echo $color && return

    fatal "Color '${1}' invalid or not existing"
}


# -----------------------------------------------------------------------------
# Preview functions
# -----------------------------------------------------------------------------

setfg() {
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb ${1}) 
}

setbg() {
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb ${1}) 
}

res() {
    echo -en "\033[0m"
}

ecolor() {
    [[ "${2}" ]] \
        && echo -en "$(setbg ${2})"
    echo -en "$(setfg ${1})  ${1}  $(res)"
}

eline() {
    local def="─"
    local sep="${1:-$def}"
    local len=$(( ${2:-70} - ${#3} ))

    printf "${sep}%.0s" $(seq $len)
    echo -e "${3}"
}

preview_theme() {
	local name="$(basename "${THEME:-xrdb}")"

    eline "─" 70 "[ ${name} ]"
    echo -e "  BLK      RED      GRN      YEL      BLU      MAG      CYN      WHT  "
    eline "─" 70

    for i in {0..15}; do
        setfg $(get $i)
        echo -n "$(get $i)"

        [[ $i == 7 || $i == 15 ]] \
            && echo -e "\033[0m" || echo -n "  "
    done
    eline "─" 70
}

preview_theme_block() {
    for i in {0..7}; do
        setfg $(get $i)
        echo -en " ████"
        setfg $(get $(($i + 8)))
        echo -en "▄ "
        [[ $i -lt 7 ]] && echo -n "  "
    done
    echo -e "\033[0m"

    for i in {0..7}; do
        setfg $(get $i)
        echo -en " ████"
        setfg $(get $(($i + 8)))
        echo -en "█ "
        [[ $i -lt 7 ]] && echo -n "  "
    done
    echo -e "\033[0m"

    for i in {0..7}; do
        setfg $(get $(($i + 8)))
        echo -en "  ▀▀▀▀ "
        [[ $i -lt 7 ]] && echo -n "  "
    done
    echo -e "\033[0m"
}

preview_theme_header() {
	local name="${THEME:-xrdb}"
    local wall="$(get_wallpaper)"

	echo -e "Theme:         ${name/$HOME/\~}"
    echo -e "Wallpaper:     ${wall/$HOME/\~}"
    echo -e "Gtk theme:     ${GTK_THEME_NAME:-...} [$(get_gtk_setting gtk-theme-name)]"
    echo -e "Icons theme:   ${GTK_ICON_THEME_NAME:-...} [$(get_gtk_setting gtk-icon-theme-name)]"
	echo -e "Dark theme:    ${GTK_APPLICATION_PREFER_DARK_THEME:-...} [$(get_gtk_setting gtk-application-prefer-dark-theme)]"
    echo -e "Font name:     ${GTK_FONT_NAME:-...} [$(get_gtk_setting gtk-font-name)]"
    echo -e "Terminal font: ${TERMINAL_FONT_NAME}"

    eline "─" 70

    echo -e "background: $(ecolor $(get background) $(get foreground))"
    echo -e "foreground: $(ecolor $(get foreground) $(get background))"
    echo -e "cursor:     $(ecolor $(get cursor)     $(get background))"
}


# -----------------------------------------------------------------------------
# Operation functions
# -----------------------------------------------------------------------------

gen_colors_from_image() {
	local light="$(bool ${2})"
	local c index=1

	if ! type -p convert >/dev/null 2>&1; then
		fatal "imagemagick not found"
		exit 1
	fi

	c=($(convert "${1}" +dither -colors 16 -unique-colors txt:- | grep -E -o " \#.{6}"))

	# color 0
	[[ "$light" ]] \
		&& echo ${c[$((${#c[@]} - 1))]} \
		|| echo ${c[0]}
	# colors 1..6
	for i in {0..5}; do
		echo ${c[$((${#c[@]} - 8 + $i))]}
	done
	# color 7
	[[ "$light" ]] \
		&& echo ${c[0]} \
		|| echo ${c[$((${#c[@]} - 1))]}
}

colors_reallocation() {
	local light="$(bool ${1})"
    local HSV=( $(rgb_to_hsv $(get 0)) )
    local v=${HSV[2]}
	local islight=0

	[[ $v -gt 60 ]] && islight=1

    if [[ "$light" ]]; then
		if isfalse $islight; then
			local _swap=$(get 0)
			COLOR[0]=$(get 7)
			COLOR[7]=$_swap
			COLOR[background]=
			COLOR[foreground]=
		fi

        if [[ ! ${COLOR[background]} ]]; then
            COLOR[background]=$( \
                rgb_value $(get 0) $(( 100 - ${THEME_BACKGROUND_VALUE:-$DEFAULT_THEME_BACKGROUND_VALUE})) \
            )
            COLOR[0]=$( \
                rgb_value $(get background) -${THEME_COLOR_SCALE:-$DEFAULT_THEME_COLOR_SCALE} \
            )
        fi

        COLOR[8]=$( \
            rgb_value $(get 0) -${THEME_COLOR_SCALE:-$DEFAULT_THEME_COLOR_SCALE} \
        )
	fi

    if [[ ! "$light" ]]; then
		if istrue $islight; then
			local _swap=$(get 0)
			COLOR[0]=$(get 7)
			COLOR[7]=$_swap
			COLOR[background]=
			COLOR[foreground]=
		fi

        if [[ ! ${COLOR[background]} ]]; then
            COLOR[background]=$( \
                rgb_value $(get 0) ${THEME_BACKGROUND_VALUE:-$DEFAULT_THEME_BACKGROUND_VALUE} \
            )
            COLOR[0]=$( \
                rgb_value $(get background) +${THEME_COLOR_SCALE:-$DEFAULT_THEME_COLOR_SCALE} \
            )
        fi

        COLOR[8]=$( \
            rgb_value $(get 0) +${THEME_COLOR_SCALE:-$DEFAULT_THEME_COLOR_SCALE} \
        )
    fi

    for i in {1..7}; do
        COLOR[$(($i + 8))]=$(rgb_value $(get $i) +${THEME_COLOR_SCALE:-$DEFAULT_THEME_COLOR_SCALE})
    done
}


# -----------------------------------------------------------------------------
# Templates/Themes describe functions
# -----------------------------------------------------------------------------

theme_list() {
    local path list l
    declare -A list

    for path in ${SEARCH_PATH[@]}; do
        for l in $(ls "${path/\~/$HOME}/themes" 2>/dev/null); do
            list["$l"]="$l"
        done
    done

    for l in "${!list[@]}"; do
        echo -n "$l "
    done
    echo ""
}

theme_path() {
    local path

    for path in ${SEARCH_PATH[@]}; do
        path="${path/\~/$HOME}/themes/${1}"
        [[ -e "$path" ]] \
            && echo "$path" && return 0
    done
    return 1
}

template_path() {
    local path

    for path in ${SEARCH_PATH[@]}; do
        path="${path/\~/$HOME}/templates/${1}"
        [[ -e "$path" ]] \
            && echo "$path" \
            && return 0
    done
    return 1
}


# -----------------------------------------------------------------------------
# Main operation functions
# -----------------------------------------------------------------------------

gen_theme_from_image() {
    local color index
    local colors=$(\
        gen_colors_from_image "${1/\~/$HOME}" \
        $(neg ${GTK_APPLICATION_PREFER_DARK_THEME:-1})\
    )

    debug "Image-theme generator: $colors"

    for color in $colors; do
        COLOR[${index:-0}]="$color"
        ((index++))
    done
}

apply() {
    local data
    local SRCE="${1/\~/$HOME}"
    local DEST="${2/\~/$HOME}"

    if [[ ! -f "$SRCE" ]]; then
        error "Template '${SRCE/$HOME/\~}' not existing!"
        return 1
    fi

    rm    -f "$DEST" > /dev/null 2>&1
    mkdir -p "$(dirname "${DEST}")" > /dev/null 2>&1

    while read -r data; do
        local IFS=$'\x1B'

        data="${data//\\/\\x5C}"
        data="${data//\"/\\x22}"
        data=$'\x22'$data$'\x22'

        eval echo -e ${data} >> $DEST 2>/dev/null \
            || return 1

    done < $SRCE
}

apply_template() {
    local name=${1}; shift
    local template="$(template_path "${name}")"

    debug "apply_template: $template, $name, ${@}"

    if [[ -d "${template}" ]]; then
        info "start apply module '${name}'"

        source "$template/install.sh" ${@} \
            && success "Module '${name}' ${APPLY_SUCCESS:-is installed}" \
            || error   "Module '${name}' ${APPLY_ERROR:-is not installed}"

    else
        info "start apply of template '${name}'"

        local DEFAULT_PATH="${CACHE:-$HOME/.cache}/${name}"
        local INSTALL_PATH=

        [[ "${1}" == "-" ]] \
            && INSTALL_PATH="${2/\~/$HOME}/${name}" \
            || INSTALL_PATH="${1/\~/$HOME}"

        debug "install ${name} to: ${INSTALL_PATH:-$DEFAULT_PATH}"

        apply "$template" "${INSTALL_PATH:-$DEFAULT_PATH}" \
            && success "Template '${name}' ${APPLY_SUCCESS:-is installed}" \
            || error   "Template '${name}' ${APPLY_ERROR:-is not installed}"
    fi
}

apply_dconf_template() {
    local name=${1}; shift
    local template="$(template_path "${name}")"
    local dcfg="/$(echo ${name} | sed 's/\./\//g')/"

    debug "apply_dconf_template: $template, $name, $dcfg, ${@}"

    local TMP_PATH="${CACHE:-$HOME/.cache}/${name}"

    if ! apply "$template" "$TMP_PATH"; then
        error "DConf template '${name}' ${APPLY_ERROR:-is not installed}"
        return 1
    fi

    dconf load $dcfg < "$TMP_PATH" \
        && success "DConf template '${name}' ${APPLY_SUCCESS:-is installed}" \
        || error   "DConf template '${name}' ${APPLY_ERROR:-is not installed}"
}


# -----------------------------------------------------------------------------
# Import color-scheme from pywal
# https://github.com/dylanaraps/pywal
# -----------------------------------------------------------------------------
import_wal_colorscheme() {
    local color

    local data="$(cat "${1}")"

    for i in {0..15}; do
        color=$(echo "$data" | jq ".colors.color${i}" | sed 's/"//g')
        if ! isrgb "$color"; then
            fatal "import error"
            return 1
        fi
        COLOR[$i]="$color"
    done
}

# - Import Konsole Color Schemes -------------------------------------------------
import_konsole_colorscheme() {
    local color

    local data="$(cat "${1}")"

    for i in {0..15}; do
        color=$(echo "$data" | grep -A01 "\[Color${i}\]" | grep "Color=")
        color=${color:6}
        COLOR[$i]="$(rgb_to_hex ${color//,/ })"
    done
}

