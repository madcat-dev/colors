#!/usr/bin/env bash

LC_ALL=C

# -----------------------------------------------------------------------------
BASE="$(dirname "${BASH_SOURCE:-$0}")"

source "$BASE/lib/x-theme-lib" 2>/dev/null \
    || source "$BASE/../lib/x-theme-lib" \
    || exit 1


# -----------------------------------------------------------------------------
# Defaults
#   Set environment variable without DEFAULT_ prefix to replace that
# -----------------------------------------------------------------------------

DEFAULT_GTK_APPLICATION_PREFER_DARK_THEME=1
DEFAULT_GTK_THEME_NAME='FlatColor'
DEFAULT_GTK_ICON_THEME_NAME='Tela'
DEFAULT_GTK_FONT_NAME='Noto Sans 11'
DEFAULT_TERMINAL_FONT_NAME='Iosevka Fixed Curly Medium 12'
DEFAULT_CURSOR_COLOR='#FFA500'


# -----------------------------------------------------------------------------
DEBUG_LEVEL=3
NOTIFY_HEADER='$LABEL'

[[ "${@}" == *"--debug"* ]] \
    && DEBUG_LEVEL=0

# Initialise
CACHE="$HOME/.cache/x-theme"
mkdir -p "$CACHE" > /dev/null 2>&1


set_timer
restore_colors_from_xrdb

while [ -n "$1" ]; do
    VAL=

    case "${1}" in
    --install)
        INSTALL=Yes
        ;;
    --restore)
        RESTORE=Yes
        ;;

    --color|-c)
        dest= value= mod= srce=

        dest=$(get_color_key "${2}")
        [[ $dest == "UNDEFINED" ]] \
            && fatal "Invalid '${2}' color key"
        shift

        while [ -n "$2" ]; do
            if isrgb "$2"; then
                srce="$2"

            elif [[ "$2" == "from" ]]; then
                srce="${3}";
                shift

            elif [[ " h s v i hue saturation value inverse " == *" ${2,,} "* ]]; then
                [[ ${#2} -gt 1 ]] && mod="--${2}" || mod="-${2}"
                value="${3}"
                shift

            else
                [[ ! "$(get_color_key "${2}")" == "UNDEFINED" ]] \
                    && srce="${2}" \
                    || break
            fi
            shift
        done

        debug "source: ${srce:-$dest}"

        isrgb "${srce:-$dest}" \
            || srce=$(get "${srce:-$dest}")

        debug "destination: $dest"
        debug "source color: ${srce:-$dest}"
        debug "modifier: ${mod:--} ${value:--}"

        if [[ "$mod" ]]; then
            result=$(rgb_transform "$srce" "$mod" "$value")
        else
            result="$srce"
        fi

        debug "result: $result to $dest"
        COLOR[$dest]="$result"
        ;;

    --hue)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_hue $(get $i) ${2})
        done
        shift
        ;;

    --saturation)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_saturation $(get $i) ${2})
        done
        shift
        ;;

    --value)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_value $(get $i) ${2})
        done
        shift
        ;;

    --inverse)
        for i in {0..7}; do
            COLOR[$i]=$(rgb_inverse $(get $i))
        done
        ;;

    --light)
        GTK_APPLICATION_PREFER_DARK_THEME=0
        ;;
    --dark)
        GTK_APPLICATION_PREFER_DARK_THEME=1
        ;;

    --save)
        [[ ! ${2} || ${2:0:1} == "-" ]] && \
            fatal "Invalid parameter '${2}' from ${1} argument"

        SAVE_THEME=${2}
        shift
        ;;

    --list)
        theme_list
        exit 0
        ;;

    --short)
        SHORT_PREVIEW=Yes
        ;;

    --pure|-)
        PURE_THEME=Yes
        ;;

    --reset)
        COLOR[background]=
        ;;

    --image)
        COLOR=()
        THEME="${2}"
        debug "Generate theme from wallpaper: $THEME"
        gen_theme_from_image "$THEME"
        shift
        ;;

    --wal)
        COLOR=()
        THEME="$(get_wallpaper)"
        debug "Generate theme from wallpaper: $THEME"
        gen_theme_from_image "$THEME"
        ;;

    --import)
        COLOR=()
        TYPE="${2}"
        THEME="${3}"
        shift; shift

        debug "Import theme: $THEME, by $TYPE"
        
        [[ "$TYPE" == "pywal" ]] \
            && import_wal_colorscheme "$THEME"

        [[ "$TYPE" == "konsole" ]] \
            && import_konsole_colorscheme "$THEME"
        ;;

    --debug)
        ;;

    *)
        COLOR=()
        THEME="${1}"
        debug "Load theme: $THEME"

        source "${THEME/\~/$HOME}" 2>/dev/null \
            || source "$(theme_path "${THEME}")" \
            || fatal "Color theme '$THEME' not found"
        ;;
    esac
    shift
done

restore_environment_variables


# - Restore -------------------------------------------------------------------
if istrue "${RESTORE}"; then
    APPLY_SUCCESS="is restored"
    APPLY_ERROR="is not restored"

    source "$CACHE/colors.theme" 2>/dev/null \
        && success "Theme is loaded" \
        || fatal   "Theme is not loaded"

    # Convert theme to base sh format
    init_sh_theme

    apply_template  xrdb
    apply_template  xfce-terminal
    apply_template  colors-rofi.rasi    - ~/.config/rofi
    apply_template  colors-kitty.conf   - ~/.config/kitty

    apply_dconf_template  org.xfce.mousepad

    notify "-- Restore complete, errors: $ERROR_COUNTER --"
    exit 0
fi


# - Realloc colors from theme -------------------------------------------------
if isfalse "${PURE_THEME}"; then
    colors_reallocation \
        $(neg ${GTK_APPLICATION_PREFER_DARK_THEME:-1})
fi


# - Preview -------------------------------------------------------------------
isfalse "${SHORT_PREVIEW}" \
    && preview_theme_header

preview_theme


# - Save scheme to path -------------------------------------------------------
if [[ ${SAVE_THEME} ]]; then
    APPLY_SUCCESS="is saved"
    APPLY_ERROR="is not saved"
	apply_template  colors.theme "${SAVE_THEME}"
fi


# - Install... ----------------------------------------------------------------
if istrue "${INSTALL}"; then
    APPLY_SUCCESS="is installed"
    APPLY_ERROR="is not installed"

    # Convert theme to base sh format
    init_sh_theme

    # Templates...
    apply_template  colors.theme
    apply_template  colors.sh
    apply_template  colors.css
    apply_template  colors.json

    apply_template  zathurarc           - ~/.config/zathura
    apply_template  gtksourceview.xml   - ~/.local/share/gtksourceview-3.0/styles
    apply_template  gtksourceview.xml   - ~/.local/share/gtksourceview-4/styles
    apply_template  colors-rofi.rasi    - ~/.config/rofi
    apply_template  colors-kitty.conf   - ~/.config/kitty
    apply_template  colors.qss          - ~/.config/qt5ct/qss
    apply_template  colors.qss          - ~/.config/qt6ct/qss

    # Modules...
    apply_template  xrdb
    apply_template  xfce-terminal
    apply_template  dunst
    apply_template  gtk
    apply_template  gtk-icon-theme
    apply_template  gtk-theme
    apply_template  telegram  "$CACHE/colors.sh"

    # DConf
    apply_dconf_template  org.xfce.mousepad

    notify "-- Installation complete, errors: $ERROR_COUNTER --"
fi

success "Operation completed in $(displaytime $(get_timer))"
