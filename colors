#!/usr/bin/env bash

APP_NAME="colors2"

LC_ALL=C

SHARED_PATHS=(
    "$(realpath $(dirname $0))"
    "$(realpath $(dirname $0))/$APP_NAME"
    "$HOME/.local/share/$APP_NAME"
    "/usr/local/share/$APP_NAME"
    "/usr/share/$APP_NAME"
)

for path in ${SHARED_PATHS[@]}; do
    if [[ -f "$path/lib/core.sh" ]]; then
        SHARED_PATH="$path"
        break
    fi
done

if ! source $SHARED_PATH/lib/core.sh 2>/dev/null; then
    echo -e "\033[31mCore module not loaded!\033[0m"
    exit 1
fi


DEBUG_LEVEL=0
NOTIFY_HEADER='$LABEL'


# Initialise
CACHE="$HOME/.cache/${APP_NAME}"
mkdir -p "$CACHE" > /dev/null 2>&1

AVAILABLE=( $(ls $SHARED_PATH/themes) )


set_timer
restore_colors_from_xrdb
restore_environment_variables


while [ -n "$1" ]; do
    VAL=

    case "${1}" in
    --install)
        INSTALL=Yes
        ;;
    --dry-install)
        INSTALL=Yes
        export PREFIX="/tmp/"
        ;;
    --restore)
        RESTORE=Yes
        ;;

    --color|-c)
        dest= value= mod= srce=

        dest=$(get_color_key "${2}")
        [[ $dest == "UNDEFINED" ]] \
            && fatal "Invalid '${2}' color key"
        shift

        while [ -n "$2" ]; do
            if isrgb "$2"; then
                srce="$2"

            elif [[ "$2" == "from" ]]; then
                srce="${3}";
                shift

            elif [[ " h s v i hue saturation value inverse " == *" ${2,,} "* ]]; then
                [[ ${#2} -gt 1 ]] && mod="--${2}" || mod="-${2}"
                value="${3}"
                shift

            else
                [[ ! "$(get_color_key "${2}")" == "UNDEFINED" ]] \
                    && srce="${2}" \
                    || break
            fi
            shift
        done

        debug "source: ${srce:-$dest}"

        isrgb "${srce:-$dest}" \
            || srce=$(get "${srce:-$dest}")

        debug "destination: $dest"
        debug "source color: ${srce:-$dest}"
        debug "modifier: ${mod:--} ${value:--}"

        if [[ "$mod" ]]; then
            result=$(rgb_transform "$srce" "$mod" "$value")
        else
            result="$srce"
        fi

        debug "result: $result to $dest"
        COLOR[$dest]="$result"
        ;;

    --hue)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_hue $(get $i) ${2})
        done
        shift
        ;;

    --saturation)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_saturation $(get $i) ${2})
        done
        shift
        ;;

    --value)
        isvalue "${2}" \
            || fatal "Invalid parameter '${2}' from ${1} argument"

        for i in {0..7}; do
            COLOR[$i]=$(rgb_value $(get $i) ${2})
        done
        shift
        ;;

    --inverse)
        for i in {0..7}; do
            COLOR[$i]=$(rgb_inverse $(get $i))
        done
        ;;

    --light)
        GTK_APPLICATION_PREFER_DARK_THEME=0
        ;;
    --dark)
        GTK_APPLICATION_PREFER_DARK_THEME=1
        ;;

    --save)
        [[ ! ${2} || ${2:0:1} == "-" ]] && \
            fatal "Invalid parameter '${2}' from ${1} argument"

        SAVE_THEME=${2}
        shift
        ;;

    --list)
        echo -e "${AVAILABLE[@]}"
        exit 0
        ;;

    --short)
        SHORT_PREVIEW=Yes
        ;;

    --image)
        COLOR=()
        THEME="${2/\~/$HOME}"

        for color in $(gen_colors_from_image "${2/\~/$HOME}" $(neg ${GTK_APPLICATION_PREFER_DARK_THEME:-1})); do
            COLOR[${index:-0}]="$color"
            ((index++))
        done

        shift
        ;;
    *)
        COLOR=()
        THEME="${1/\~/$HOME}"

        debug "Load theme '$THEME'"

        [[ ! -f "${THEME}" ]] \
            && THEME="$SHARED_PATH/themes/$THEME"

        source "$THEME" 2>/dev/null \
            || fatal "Color theme '$THEME' not found"
        ;;
    esac
    shift
done


# Restore
if istrue "${RESTORE}"; then
    get_sh_theme "${CACHE}/colors.sh" \
        && success "Shell theme is restored" \
        || fatal   "Shell theme is not restored"

    success "Restore complete"
    exit 0
fi

colors_reallocation \
    $(neg ${GTK_APPLICATION_PREFER_DARK_THEME:-1})

isfalse "${SHORT_PREVIEW}" \
    && preview_theme_header

preview_theme

# Save scheme to path
if [[ ${SAVE_THEME} ]]; then
	save_theme "${SAVE_THEME}" \
        && success "Theme '${SAVE_THEME/$HOME/\~}' is saved" \
        || error   "Theme '${SAVE_THEME/$HOME/\~}' is not saved"
fi

# Install...
if istrue "${INSTALL}"; then
    gen_sh_theme "${CACHE}/colors.sh" \
        && success "Shell theme is generated" \
        || fatal   "Shell theme is not generated"

    get_sh_theme "${CACHE}/colors.sh" \
        && success "Shell theme is restored" \
        || fatal   "Shell theme is not restored"

    success "Installation complete"
fi

info "Operation completed in $(displaytime $(get_timer))"

